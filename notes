# ECS Service
resource "aws_ecs_service" "my_service" {
  name            = "${var.environment_name}-ecs-service-task"
  cluster         = aws_ecs_cluster.my_ecs_cluster.id
  task_definition = aws_ecs_task_definition.my_task_definition.arn
  launch_type     = "FARGATE"
  desired_count   = 1

  load_balancer {
    target_group_arn = aws_lb.my_alb.arn
    container_name   = "var.container_name"
    container_port   = 3000
  }

  network_configuration {
    subnets         = [aws_subnet.private_subnet_1.id, aws_subnet.private_subnet_2.id]
    security_groups = [aws_security_group.ecs_security_group.id]

  }
}

#############################  Load Balancer #############################################

# Application Load Balancer
resource "aws_lb" "my_alb" {
  name               = "${var.environment_name}-load-balacer"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.ecs_security_group.id]
  subnets            = [aws_subnet.public_subnet_1.id, aws_subnet.public_subnet_2.id]
  
}

# ALB Target Group
resource "aws_lb_target_group" "my_target_group" {
  name     = "${var.environment_name}-my-target-group"
  port     = 80
  protocol = "HTTP"
  target_type = "alb"
  vpc_id   = aws_vpc.my_vpc.id
}

# ALB Listener
resource "aws_lb_listener" "my_listener" {
  load_balancer_arn = aws_lb.my_alb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.my_target_group.arn
  }
}